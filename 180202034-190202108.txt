#include <stdio.h>
#include <stdlib.h>
struct kayit {// temelde kullanılan struct bu
	int ogrno ;
	int derskodu;
	int puan ;
};
int datacount (){//Veri dosyasındaki kayıt sayısını bulup dönderen fonksiyon toplam içeride 50 kayıt varsa 50 sayısını dönderiyor
	int a;
	struct kayit before ;
	struct kayit now ;
	FILE *file ;
	file=fopen("veridosyasi.bin","rb");// veri dosyası okunuyor
	for(a=0;a<10000;a++){//Veri dosyasındaki eleman sayısından daha fazla olacak şekilde döngü dönüyor veri dosyasından i değeri kadar eleman çekiliyor eğer dosyada olan eleman sayısından fazla eleman
		before.ogrno=now.ogrno ;// çekilmek istenirse sürekli dosyanın sonundakini bastırıyor bu yüzden hep bir önceki structı tutup aynısımı diye kontrol ediyoruz aynısı olduğu andada returnle 
		before.puan=now.puan ;// kaç defa çekildiğini alıyoruz buda veri dosyasındaki eleman sayımız oluyor
		before.derskodu=now.derskodu ;
	fread(&now,sizeof(struct kayit),1,file);
	if(before.ogrno==now.ogrno && before.derskodu==now.derskodu && before.puan==now.puan){
		return a ;// return sayesinde dönderme işlemi bitiyor döngü kırılıyor
		}
						}
	fclose(file);	
}
void indexdosyasiolustur(){
	int a,b ;
	int count=datacount();// eleman sayısını aldık
	struct kayit indexfile[count] ;// eleman sayısı kadar struct dizisi oluşturduk
	FILE *datafile ;
	datafile=fopen("veridosyasi.bin","rb");// veri dosyası okunuyor
	for (a=0;a<count;a++){// veri dosyası eleman sayısı elimizde olduğundan o kadar veri çekilip struct dizisine atılıyor 
		fread(&indexfile[a],sizeof(struct kayit),1,datafile);// fread tek seferde 1 kayıt çekiyor kayıt sayısı kadar çekme işemini indexfile struct dizisinin içine yapıyoruz.
	}
	fclose(datafile);
	struct kayit kayt ;
	for(b=1;b<count;b++)// bu 2 for sayesinde struct dizisindeki elemanları ogrno'ya göre küçükten büyüğe sıralıyoruz.
       {
           for (a=0;a<count - 1;a++)
          {
           if (indexfile[a].ogrno>indexfile[a+1].ogrno)
           {
               kayt.ogrno=indexfile[a].ogrno;
               kayt.derskodu=indexfile[a].derskodu;
               kayt.puan=indexfile[a].puan ;
               indexfile[a].ogrno=indexfile[a+1].ogrno;
               indexfile[a].derskodu=indexfile[a+1].derskodu;
               indexfile[a].puan=indexfile[a+1].puan;
               indexfile[a+1].ogrno=kayt.ogrno;
               indexfile[a+1].derskodu=kayt.derskodu;
               indexfile[a+1].puan=kayt.puan;
           }
          }
       }
	FILE *file ;
	file=fopen("indexdosyasi.txt","w");// veri dosyası eleman sayısı kadar index dosyasına sıralanmış verileri sırasıyla basıyoruz.
	for (a=0;a<count;a++){
		fprintf(file,"%d %d %d\n",indexfile[a].ogrno,indexfile[a].derskodu,indexfile[a].puan);
	}
	fclose(file);
	printf("İndex dosyasi olusturuldu.\n");
}
void kayitEkle(struct kayit eklenecekstruct){// mainden struct geliyor 
	
	FILE *datafile ;
	datafile =fopen("veridosyasi.bin","ab");// dosyayı ekleme modunda açıyoruz.
	
	fwrite(&eklenecekstruct,sizeof(struct kayit),1,datafile);// veri dosyasının sonuna gelen structı ekliyoruz.
	
	fclose(datafile) ;
	int a,b ;
	int count=datacount();// eleman sayısını aldık
	struct kayit indexfile[count] ;// eleman sayısı kadar struct oluşturduk
	FILE *data ;
	data=fopen("veridosyasi.bin","rb");// veri dosyası okunuyor
	for (a=0;a<count;a++){// veri dosyası eleman sayısı elimizde olduğundan o kadar veri çekilip struct dizisine atılıyor 
		fread(&indexfile[a],sizeof(struct kayit),1,data);
	}
	fclose(data);
	struct kayit kayt ;
	for(b=1;b<count;b++)// bu 2 for sayesinde struct dizisindeki elemanları ogrno'ya göre sıralıyoruz.
       {
           for (a=0;a<count - 1;a++)
          {
           if (indexfile[a].ogrno>indexfile[a+1].ogrno)
           {
               kayt.ogrno=indexfile[a].ogrno;
               kayt.derskodu=indexfile[a].derskodu;
               kayt.puan=indexfile[a].puan ;
               indexfile[a].ogrno=indexfile[a+1].ogrno;
               indexfile[a].derskodu=indexfile[a+1].derskodu;
               indexfile[a].puan=indexfile[a+1].puan;
               indexfile[a+1].ogrno=kayt.ogrno;
               indexfile[a+1].derskodu=kayt.derskodu;
               indexfile[a+1].puan=kayt.puan;
           }
          }
       }
	FILE *file ;
	file=fopen("indexdosyasi.txt","w");// veri dosyası eleman sayısı kadar index dosyasına sıralanmış verileri sırasıyla basıyoruz.
	for (a=0;a<count;a++){
		fprintf(file,"%d %d %d\n",indexfile[a].ogrno,indexfile[a].derskodu,indexfile[a].puan);
	}
	fclose(file);
	printf("index dosyasi Guncellendi.\n");
}

void kayitBul(int ogrno,int derskodu,int puan){// mainden aranacak değerleri alıyoruz.
	int count=datacount() ;// veri dosyasındaki eleman sayısını çektik
	int *p,*t,a,b,c ;
	struct kayit indexfile[count];// eleman sayısı kadar struct oluşturduk
	FILE *dosya ;
	dosya=fopen("indexdosyasi.txt","r");// index dosyasındaki verileri alıyoruz çünki sıralanmış binary search yaparken işimize yarayacak
	int i,j ;
	for (i=0;i<count;i++){// index dosyasındaki verilerin alınması
	fscanf(dosya,"%d %d %d\n",&a,&b,&c);// veriler x y z ye atanıyor ordanda yeni oluşturulmuş structa atanıyor
	indexfile[i].ogrno=a;
	indexfile[i].derskodu=b ;
	indexfile[i].puan=c ;
	}
	// burdan finaldizi[sayac]'a kadar olan yer binary search bunu bende internetten aldım ekstra eklemelerimi yanına yazacağım
	int bb=count ;
	int sayac =0;
	int samearray[10];
	int k=-1 ;
	int flag=0 ;
	while(bb-k>1){
		int look=(bb+k)/2 ;
		p=indexfile[look].derskodu ;// derskodu ve puan adres olarak tutulduğu için pointer olan p t ye atanıyor *p yapıldığında adresin gösterdiği yere gidiyor
		t=indexfile[look].puan ;
		if(indexfile[look].ogrno==ogrno && *p==derskodu && *t==puan){// kullanıcı ders kodunu ve puanı sayı olarak veriyor pointerları kullandığımızdan bizde sayı olarak denk mi diye bakıyoruz
			flag=1 ;
			printf("istenilen kayit %d. indexte bulundu.",look);// hepsi denkse direk yazdırıp break le döngüyü kırıyor
			break ;
		}
		else if (sayac==10){
			break ;
		}
		else if (indexfile[look].ogrno==ogrno && indexfile[look].puan!=puan){// binary 'e eklediğim yer burası ogr no lar eşit ve puanlar eşit değilse buraya gidiyor 
			samearray[sayac]=look;// bu else if de bu şartı sağlayanların index numarası diziye atanıyor ama sürekli diziye aynı index numaralarını atıyor bu problemi ilerde çözüyoruz.
			sayac++;// şimdilik en fazla aynı ogr no sahip kayıtların 10 defa bulunabileceğini düşükdük ve diziye o kadar eleman aldık kısacası aynı ogr noya sahip 2 index varsa 
			bb++ ;// sürekli burada dizinin içine belli olmayan sırada o 2 indexi veriyor
		}
		else if(indexfile[look].ogrno<ogrno){// oto binary search
			k=look ;
		}
		else {// oto binary search
			bb=look ;
		}
		
	}
	// dizide 0 1 0 1 0 1 gibi aynı sayılar vardı aynı sayıları 0 ve 1 olacak şekilde distinct edilmesini sağlayan işlem aşağıdaki for döngüsü
		for (i=0; i<sayac; i++)
	{
			for (j=0; j<i; j++)
			{
				if (samearray[i] == samearray[j]){
					break;
					}
			}

			if (i == j){
				printf("Ayni anahtara sahip bir kayit %d. indexte bulundu.\n", samearray[i]);
				}
	}
	// yukarıda kullanıcının girdiği değerlere eşit bir kayıt bulunursa bulundu diyip breakla döngüyü kırıyordu eğer oraya girerse flag'da 1 oluyor oraya girmeden döngü kırıldıysa flag 0 kalıyor bu sayede aranan değerdeki kaydın bulunamadığını anlıyorız
	if (flag==0){
		printf("Kayit yok.\n");
	}
}
void kayitSil(){
	printf("ogr no girin:");// silinmesini istediginimiz kayıtları alıyoruz
	int q,w,e,i,c=0,b=0 ;
	scanf("%d",&q);
	printf("ders kodu girin:");
	scanf("%d",&w);
	printf("puan girin:");
	scanf("%d",&e);
	int count=datacount();// diğerleri ile aynı
	struct kayit binaryfile[count] ;
	FILE *datafile ;
	datafile=fopen("veridosyasi.bin","rb");//okuma modunda açtık 
	for (i=0;i<count;i++){
		fread(&binaryfile[i],sizeof(struct kayit),1,datafile);// içeridekileri struct dizisine aldık
	}
	fclose(datafile);
	int *l,*k,final=-15 ;
	for(i=0;i<count;i++){// silinmesini istediğimiz kayitların index numarasını bulduruyoruz.sonuca atıyoruz
		l=binaryfile[i].derskodu ;
		k=binaryfile[i].puan ;
		if(q==binaryfile[i].ogrno && *l==w && *k==e){
			final=i ;
		}
	}
	if(final==-15){//sonuc hala -15 ise kayıt bulunamadı demek 
		printf("Bu girilen degerlerde kayit bulunamadi.\n");
	}
	else{// sonucun -15 olmadığı durumda 
		
	FILE *dosya ;
	dosya =fopen("veridosyasi.bin","wb");
	for(i=0;i<count;i++){// baştan dosyayı yazdırıyoruz ama o indexe geldiğinde yazma işlemi yapmıyor bu şekilde yeni veri dosyasında o kayıt silinmiş oluyor
		if(final==i){
			final++;
		}
		else{
			fwrite(&binaryfile[i],sizeof(struct kayit),1,dosya);
		}
	}
	fclose(dosya) ;	
	}
	count=datacount();
	struct kayit indexfile[count] ;
	FILE *data ;
	data=fopen("veridosyasi.bin","rb");// veri dosyası okunuyor
	for (i=0;i<count;i++){// veri dosyası eleman sayısı elimizde olduğundan o kadar veri çekilip struct dizisine atılıyor 
		fread(&indexfile[i],sizeof(struct kayit),1,data);
	}
	fclose(data);
	
	struct kayit kayt ;
	for(b=1;b<count;b++)// bu 2 for sayesinde struct dizisindeki elemanları ogrno'ya göre sıralıyoruz.
       {
           for (i=0;i<count - 1;i++)
          {
           if (indexfile[i].ogrno>indexfile[i+1].ogrno)
           {
               kayt.ogrno=indexfile[i].ogrno;
               kayt.derskodu=indexfile[i].derskodu;
               kayt.puan=indexfile[i].puan ;
               indexfile[i].ogrno=indexfile[i+1].ogrno;
               indexfile[i].derskodu=indexfile[i+1].derskodu;
               indexfile[i].puan=indexfile[i+1].puan;
               indexfile[i+1].ogrno=kayt.ogrno;
               indexfile[i+1].derskodu=kayt.derskodu;
               indexfile[i+1].puan=kayt.puan;
           }
          }
       }
	FILE *file ;
	file=fopen("indexdosyasi.txt","w");// veri dosyası eleman sayısı kadar index dosyasına sıralanmış verileri sırasıyla basıyoruz.
	for (i=0;i<count;i++){
		fprintf(file,"%d %d %d\n",indexfile[i].ogrno,indexfile[i].derskodu,indexfile[i].puan);
	}
	fclose(file);
	printf("İndex dosyasi Guncellestirildi.\n");
	
	
	
}
static int zsayisi ;
void kayitGuncelle(){
		int q,w,e ;// güncellenmesini istedigmiz kaydın ogr nosunu ve derskodunu alıyoruz ve yeni puanı 
		printf("ogrnosunu giriniz :");
		scanf("%d",&q);
		printf("ders kodunu giriniz :");
		scanf("%d",&w);
		printf("yeni puani :");
		scanf("%d",&e);

	int count=datacount();// yine aynı
	struct kayit now[count] ;
	int i,tutucu=0;
	FILE *datafile ;
	datafile=fopen("veridosyasi.bin","rb");// okuma modunda açtık
	for (i=0;i<count;i++){
		fread(&now[i],sizeof(struct kayit),1,datafile);// eleman sayısı kadar eldeki isimli struct dizisine veri dosyasındakileri çektik
	}
	fclose(datafile);
	int *pointer ;
	zsayisi=e ;
	for (i=0;i<count;i++){//tüm struct dizisi içinde arama yapılıyor kullanıcıdan alınan ogr no ve ders kodunun eşit olduğu kayıt varsa kullanıcının verdiği değerin adresi 
		pointer=now[i].derskodu ;// o indexteki puana atanıyor
		if(now[i].ogrno==q && *pointer==w){
			now[i].puan=&zsayisi ;
			tutucu++;
			printf("kayit degistirildi.\n");
		}
	}
	if(tutucu==0){// ogr nosu ve ders kodu eşit kayıt bulunamadıysa
		printf(" eslesme yok .\n");
	}
	FILE *file ;
	file =fopen("veridosyasi.bin","wb");// en son güncelennene struct dizisi tekrardan veri dosyasına basılıyor
	for(i=0;i<count;i++){
			fwrite(&now[i],sizeof(struct kayit),1,file);
	}
	fclose(file) ;	
	
	int a,b ;
	struct kayit indexfile[count] ;// eleman sayısı kadar struct oluşturduk
	FILE *binaryfile ;
	binaryfile=fopen("veridosyasi.bin","rb");// veri dosyası okunuyor
	for (a=0;a<count;a++){// veri dosyası eleman sayısı elimizde olduğundan o kadar veri çekilip struct dizisine atılıyor 
		fread(&indexfile[a],sizeof(struct kayit),1,binaryfile);
	}
	fclose(binaryfile);
	struct kayit kayt ;
	for(b=1;b<count;b++)// bu 2 for sayesinde struct dizisindeki elemanları ogrno'ya göre sıralıyoruz.
       {
           for (a=0;a<count - 1;a++)
          {
           if (indexfile[a].ogrno>indexfile[a+1].ogrno)
           {
               kayt.ogrno=indexfile[a].ogrno;
               kayt.derskodu=indexfile[a].derskodu;
               kayt.puan=indexfile[a].puan ;
               indexfile[a].ogrno=indexfile[a+1].ogrno;
               indexfile[a].derskodu=indexfile[a+1].derskodu;
               indexfile[a].puan=indexfile[a+1].puan;
               indexfile[a+1].ogrno=kayt.ogrno;
               indexfile[a+1].derskodu=kayt.derskodu;
               indexfile[a+1].puan=kayt.puan;
           }
          }
       }
	FILE *filee ;
	filee=fopen("indexdosyasi.txt","w");// veri dosyası eleman sayısı kadar index dosyasına sıralanmış verileri sırasıyla basıyoruz.
	for (a=0;a<count;a++){
		fprintf(filee,"%d %d %d\n",indexfile[a].ogrno,indexfile[a].derskodu,indexfile[a].puan);
	}
	fclose(filee);
	printf("index dosyasi guncellendi.\n");
	
	
	
	
}
void veriDosyasiniGoster(){
	int count=datacount();// aynı şeyler
	struct kayit datafile[count] ;
	int i;
	FILE *verifile ;
	verifile=fopen("veridosyasi.bin","rb");// okuma modunda veri dosyası açıldı
	for (i=0;i<count;i++){
		fread(&datafile[i],sizeof(struct kayit),1,verifile);// tüm kayıtlar veridosyası struct dizisine atıldı
	}
	fclose(verifile);
	printf("veri dosyasi orjinal\n");//veri dosyasının orjinal hali basılıyor
	for(i=0;i<count;i++){
		printf("%d %d %d\n",datafile[i].ogrno,datafile[i].derskodu,datafile[i].puan);
	}
}
void indeksDosyasiniGoster(){//veri dosyasındaki muhabbetin tamamen aynısı
	int count=datacount() ;
	int x,y,z ;
	struct kayit indexfile[count];// kayıt sayısı alındı
	FILE *dosya ;
	dosya=fopen("indexdosyasi.txt","r");// okuma modunda dosya açıldı
	int i ;
	for (i=0;i<count;i++){// 
	
	fscanf(dosya,"%d %d %d\n",&x,&y,&z);// kayıtlar önce x y z ye sonra structa atıldı

	indexfile[i].ogrno=x;
	indexfile[i].derskodu=y ;
	indexfile[i].puan=z ;
	}
	fclose(dosya);
	printf("index dosyasi \n");
	for(i=0;i<count;i++){// structtaki kayıtlar ekrana basıldı.
		printf("%d %d %d\n",indexfile[i].ogrno,indexfile[i].derskodu,indexfile[i].puan);
	}	
}
void indeksDosyasiniSil(){// remote ile index dosyası siliniyor
	int donus = remove("indexdosyasi.txt");
	if(donus == 0){
    fprintf(stdout, "Dosya silindi\n");
  		}
}
void veridosyasisayisal(){
	int count=datacount();// aynı şeyler
	struct kayit datafile[count] ;
	int i,*p,*t;
	FILE *verifile ;
	verifile=fopen("veridosyasi.bin","rb");// okuma modunda veri dosyası açıldı
	for (i=0;i<count;i++){
		fread(&datafile[i],sizeof(struct kayit),1,verifile);// tüm kayıtlar veridosyası struct dizisine atıldı
	}
	fclose(verifile);
	printf("veri dosyasi sayisal hali\n");//veri dosyasının sayısal hali basılıyor
	for(i=0;i<count;i++){
		p=datafile[i].derskodu ;// ders kodu ve puan adresi tutuyordu pointerın adresine onu atayıp *p yaptığımızda adresin gösterdiği yerdeki değeri gösteriyor.
		t=datafile[i].puan ;
		printf("%d %d %d\n",datafile[i].ogrno,*p,*t);// direk *p ile değerler basıldı
	}
	
}
void indexdosyasisayisal(){// index dosyasıyla aynı 
	int count=datacount() ;
	int x,y,z ;
	struct kayit indexfile[count];
	FILE *dosya ;
	dosya=fopen("indexdosyasi.txt","r");
	int i ;
	for (i=0;i<count;i++){
	
	fscanf(dosya,"%d %d %d\n",&x,&y,&z);

	indexfile[i].ogrno=x;
	indexfile[i].derskodu=y ;
	indexfile[i].puan=z ;
	}
	fclose(dosya);
	int *p,*t ;
	printf("index dosyasi \n");
	for(i=0;i<count;i++){// ders kodu ve puan adres olarak tutulduğundan pointera atandı ardındanda *p diyerek direk değerler gösterildi.
		p=indexfile[i].derskodu ;
		t=indexfile[i].puan ;
		printf("%d %d %d\n",indexfile[i].ogrno,*p,*t);
	}	
	
}



/* run this program using the console pauser or add your own getch, system("pause") or input loop */

int main(int argc, char *argv[]) {
	//Veri dosyası oluşturma bölümü
	struct kayit datafile[50];
	struct kayit datafile2[50];
	int x ;
	
	
	for (x=0;x<50;x++){// Önce döngüdeki değişkenlerin değerine göre binary isimli struct dizisine ogr derskodu ve puan atanıyor
	datafile2[x].ogrno=x%27+7;//datafile2 nin ogr nosuna direk sayı atanıyor çünki anahtar o direk sayı olması gerekiyor
	datafile[x].derskodu=x%7+1;//ders kodu ve puana direk sayılar atanıyor aşağıda o sayıların adresleri datafile2 'ye atanıyor
	datafile[x].puan=x%100+30 ;
	datafile2[x].derskodu=&datafile[x].derskodu;// ardından datafile içerisindeki ders kodu ve puanın adresi datafile2 nini içerisine atanıyor
	datafile2[x].puan=&datafile[x].puan ;
	}
	
	FILE *data ;
	data =fopen("veridosyasi.bin","wb");// dosya binary file formatında açılıyor 
	for(x=0;x<50;x++){// struct dizisinin içinde 50 farklı girdi olduğunda binary file 'a 50 kere basılması için döngü 50 defa dönüyor
	fwrite(&datafile2[x],sizeof(struct kayit),1,data);// standart binary file yazma komutları
	}
	fclose(data) ;

	//Veri dosyası oluşturma bölümü
	while(1){//döngünün sürekli dönmesi için while 1
	printf("1 index dosyası yaratmak icin\n")	;
	printf("2 Kayit eklemek icin\n");
	printf("3 Kayit bulmak icin \n");	
	printf("4 Kayit silmek icin \n")	;
	printf("5 Kayit guncellemek icin \n");	
	printf("6 Veri dosyasi gormek icin \n");	
	printf("7 index dosyasini gormek icin \n");	
	printf("8 index dosyasi silmek icin \n")	;
	printf("9 Veri dosyasi sayisal olarak gormek icin \n");	
	printf("10 index dosyasini sayisal olarak gormek icin \n");	
	
	int secim ;
	scanf("%d",&secim);
	if(secim==1){// gelen değer 1 ise index bu fonksiyona gidiyor
		indexdosyasiolustur();
	}
	else if(secim==2){// eklenmek istenen kayıtlar çekilip structa atılıp struct fonksiyona gönderiliyor
		int no,derskodu,puan ;
		printf("lutfen ogrenci numarasini giriniz.:\n");
		scanf("%d",&no);
		printf("lutfen ders kodunu giriniz.:\n");
		scanf("%d",&derskodu);
		printf("lutfen puani giriniz.:\n");
		scanf("%d",&puan);
		struct kayit veri ;
		veri.ogrno=no ;
		veri.derskodu=&derskodu ;
		veri.puan=&puan ;
		
		
		kayitEkle(veri);
		
	}
	else if(secim==3){// aranılacak değerler çekilip fonksiyona gönderiliyor
		int no,derskodu,puan ;
		printf("lutfen aranacak ogrenci numarasini giriniz.:\n");
		scanf("%d",&no);
		printf("lutfen aranacak ders kodunu giriniz.:\n");
		scanf("%d",&derskodu);
		printf("lutfen aranacak puani giriniz.:\n");
		scanf("%d",&puan);
		kayitBul(no,derskodu,puan);
	}
	else if(secim==4){// burası ve aşağısı herşey fonksiyonlarda 
		kayitSil();
	}
	else if(secim==5){
		
		kayitGuncelle();
	}
	else if(secim==6){
		veriDosyasiniGoster();
	}
	else if(secim==7){
		indeksDosyasiniGoster();
	}
	else if(secim==8){
		indeksDosyasiniSil();
	}
	else if(secim==9){
		veridosyasisayisal();
	}
	else if(secim==10){
		indexdosyasisayisal();
	}
}
	return 0;
}